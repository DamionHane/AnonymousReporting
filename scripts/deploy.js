const hre = require("hardhat");

async function main() {
    console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤ÂåøÂêç‰∏æÊä•Á≥ªÁªüÂêàÁ∫¶...");

    // Get the contract factory
    const AnonymousReporting = await hre.ethers.getContractFactory("AnonymousReporting");

    // Deploy the contract
    console.log("üìù ÈÉ®ÁΩ≤ÂêàÁ∫¶‰∏≠...");
    const anonymousReporting = await AnonymousReporting.deploy();

    // Wait for deployment
    await anonymousReporting.deployed();

    console.log("‚úÖ ÂåøÂêç‰∏æÊä•Á≥ªÁªüÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü!");
    console.log("üìç ÂêàÁ∫¶Âú∞ÂùÄ:", anonymousReporting.address);
    console.log("üîó ÁΩëÁªú:", hre.network.name);

    // Get deployment transaction
    const deployTx = anonymousReporting.deployTransaction;
    console.log("üßæ ÈÉ®ÁΩ≤‰∫§ÊòìÂìàÂ∏å:", deployTx.hash);
    console.log("‚õΩ Gas ‰ΩøÁî®Èáè:", deployTx.gasLimit?.toString());

    // Save contract address to file for frontend use
    const fs = require('fs');
    const path = require('path');

    const contractInfo = {
        address: anonymousReporting.address,
        network: hre.network.name,
        deploymentTime: new Date().toISOString(),
        txHash: deployTx.hash
    };

    const contractInfoPath = path.join(__dirname, '../public/contract-info.json');
    fs.writeFileSync(contractInfoPath, JSON.stringify(contractInfo, null, 2));

    console.log("üíæ ÂêàÁ∫¶‰ø°ÊÅØÂ∑≤‰øùÂ≠òËá≥ public/contract-info.json");

    // Verify contract on Etherscan (if on mainnet or testnet)
    if (hre.network.name !== "hardhat" && hre.network.name !== "localhost") {
        console.log("‚è≥ Á≠âÂæÖÂå∫ÂùóÁ°ÆËÆ§‰ª•ËøõË°åÈ™åËØÅ...");
        await anonymousReporting.deployTransaction.wait(6);

        try {
            await hre.run("verify:verify", {
                address: anonymousReporting.address,
                constructorArguments: [],
            });
            console.log("‚úÖ ÂêàÁ∫¶Â∑≤Âú® Etherscan ‰∏äÈ™åËØÅ");
        } catch (error) {
            console.log("‚ùå ÂêàÁ∫¶È™åËØÅÂ§±Ë¥•:", error.message);
        }
    }

    console.log("\nüìã ÈÉ®ÁΩ≤ÊëòË¶Å:");
    console.log("===============================");
    console.log(`ÂêàÁ∫¶ÂêçÁß∞: AnonymousReporting`);
    console.log(`ÂêàÁ∫¶Âú∞ÂùÄ: ${anonymousReporting.address}`);
    console.log(`ÁΩëÁªú: ${hre.network.name}`);
    console.log(`ÈÉ®ÁΩ≤ËÄÖ: ${await (await hre.ethers.getSigners())[0].getAddress()}`);
    console.log("===============================");
    console.log("\nüîß ÂêéÁª≠Ê≠•È™§:");
    console.log("1. Êõ¥Êñ∞ public/app.js ‰∏≠ÁöÑ CONTRACT_ADDRESS");
    console.log("2. ËøêË°å npm run dev ÂêØÂä®ÂâçÁ´Ø");
    console.log("3. Ê∑ªÂä†Ë∞ÉÊü•ÂëòÂú∞ÂùÄ (‰ΩøÁî® addInvestigator ÂáΩÊï∞)");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });